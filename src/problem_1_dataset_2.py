# -*- coding: utf-8 -*-
"""SNA_Project_1_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pu9w6MrI2nUfn04V2rtFo8VsdBc5BrpC
"""

import networkx as nx
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from networkx.algorithms.centrality import degree_centrality,eigenvector_centrality,closeness_centrality,betweenness_centrality,katz_centrality_numpy

# reading in the data for the first graph
# upload the out.arenas-jazz file to the local filesystem
jazz_graph=nx.Graph()

with open('out.arenas-jazz','r') as f:
  lines=f.readlines()
for line in lines:
  line=line.strip()
  lis=line.split('\t')
  jazz_graph.add_edge(lis[0],lis[1])
  print(lis)

fig=plt.figure(figsize=(50,50))
nx.draw(jazz_graph)
plt.show()

"""## Centrality Measures

1. Degree Centrality
"""

#Degree Centrality
print(degree_centrality(jazz_graph))

"""2. Eigenvector Centrality"""

#Eigenvector Centrality
print(eigenvector_centrality(jazz_graph))

"""3. Katz Centrality"""

#Katz Centrality
print(katz_centrality_numpy(jazz_graph))

"""4. Pagerank Centrality"""

#PageRank Centrality
print(nx.pagerank(jazz_graph))

"""5. Betweenness Centrality"""

#Betweenness Centrality
print(betweenness_centrality(jazz_graph))

"""6. Closeness Centrality"""

#Closeness Centrality
print(closeness_centrality(jazz_graph))

"""## Global Clustering Coefficient and Transitivity"""

#Global Clustering Coefficient and Transitivity
print(nx.transitivity(jazz_graph))

"""##Local Clustering Coefficient"""

#Local Clustering Coefficient
print(nx.clustering(jazz_graph))

"""##Reciprocity"""

#Reciprocity
nx.reciprocity(jazz_graph)

"""##Average Clustering Coefficient"""

nx.average_clustering(jazz_graph)

"""##Finding largest degree centrality"""

deg=degree_centrality(jazz_graph)
sorted_values = sorted(deg.values(),reverse=True) # Sort the values
sorted_dict = {}

for i in sorted_values:
    for k in deg.keys():
        if deg[k] == i:
            sorted_dict[k] = deg[k]
            break

print(sorted_dict)

"""##Finding largest betweenness centrality"""

deg=betweenness_centrality(jazz_graph)
sorted_values = sorted(deg.values(),reverse=True)
sorted_dict = {}

for i in sorted_values:
    for k in deg.keys():
        if deg[k] == i:
            sorted_dict[k] = deg[k]
            break

print(sorted_dict)

"""##Finding largest eigenvector centrality"""

deg=eigenvector_centrality(jazz_graph)
sorted_values = sorted(deg.values(),reverse=True)
sorted_dict = {}

for i in sorted_values:
    for k in deg.keys():
        if deg[k] == i:
            sorted_dict[k] = deg[k]
            break

print(sorted_dict)

"""##Finding largest katz centrality"""

deg=katz_centrality_numpy(jazz_graph)
sorted_values = sorted(deg.values(),reverse=True)
sorted_dict = {}

for i in sorted_values:
    for k in deg.keys():
        if deg[k] == i:
            sorted_dict[k] = deg[k]
            break

print(sorted_dict)

"""##Finding largest pagerank centrality"""

deg=nx.pagerank(jazz_graph)
sorted_values = sorted(deg.values(),reverse=True)
sorted_dict = {}

for i in sorted_values:
    for k in deg.keys():
        if deg[k] == i:
            sorted_dict[k] = deg[k]
            break

print(sorted_dict)

"""##Finding largest closeness centrality"""

deg=closeness_centrality(jazz_graph)
sorted_values = sorted(deg.values(),reverse=True)
sorted_dict = {}

for i in sorted_values:
    for k in deg.keys():
        if deg[k] == i:
            sorted_dict[k] = deg[k]
            break

print(sorted_dict)

"""##Finding largest clustering"""

deg=nx.clustering(jazz_graph)
sorted_values = sorted(deg.values(),reverse=True)
sorted_dict = {}

for i in sorted_values:
    for k in deg.keys():
        if deg[k] == i:
            sorted_dict[k] = deg[k]
            break

print(sorted_dict)

