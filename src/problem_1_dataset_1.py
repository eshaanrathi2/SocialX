# -*- coding: utf-8 -*-
"""SNA_Project_1_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYtMyBp7MTQ06UFvFSiPPtQyaYlIJG5b
"""

import networkx as nx
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from networkx.algorithms.centrality import degree_centrality,eigenvector_centrality,closeness_centrality,betweenness_centrality,katz_centrality_numpy

celegans_graph=nx.Graph()
f = open("/content/out.dimacs10-celegans_metabolic", "r")
lines = f.readlines()
lines.pop(0)
for line in lines:
    l = line.split()
    celegans_graph.add_edge(l[0],l[1])

fig=plt.figure(figsize=(50,50))
nx.draw(celegans_graph)
plt.show()

"""#Centrality measures :

1.   Degree Centrality
"""

DC = nx.degree_centrality(celegans_graph)
print(DC)

#degree centrality in graph in sorted manner
deg=degree_centrality(celegans_graph)
sort_orders = sorted(deg.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
	print(i[0], i[1])

"""2. Eigenvector Centrality"""

EVC = nx.eigenvector_centrality(celegans_graph)
print(EVC)

#Eigenvector centrality in graph in sorted manner
deg=eigenvector_centrality(celegans_graph)
sort_orders = sorted(deg.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
	print(i[0], i[1])

"""3. Katz Centrality"""

KC = nx.katz_centrality_numpy(celegans_graph)
print(KC)

#Katz centrality in graph in sorted manner
deg=nx.katz_centrality_numpy(celegans_graph)
sort_orders = sorted(deg.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
	print(i[0], i[1])

"""4. Page Rank Centrality"""

PgRC = nx.pagerank(celegans_graph)
print(PgRC)

#Pagerank centrality in graph in sorted manner
deg=nx.pagerank(celegans_graph)
sort_orders = sorted(deg.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
	print(i[0], i[1])

"""5. Betweenness Centrality"""

BC = nx.betweenness_centrality(celegans_graph)
print(PgRC)

#Betweenness centrality in graph in sorted manner
deg=nx.betweenness_centrality(celegans_graph)
sort_orders = sorted(deg.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
	print(i[0], i[1])

"""6. Closeness Centrality"""

ClzC = nx.closeness_centrality(celegans_graph)
print(ClzC)

#Closeness centrality in graph in sorted manner
deg=nx.closeness_centrality(celegans_graph)
sort_orders = sorted(deg.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
	print(i[0], i[1])

"""#Clustering coefficients (transitivity)

1. Global clustering coefficient & transitivity
"""

GlbCoef = nx.transitivity(celegans_graph)
print(GlbCoef)metabolic network of Caenorhabditis elegans

"""2. Local clustering coefficient & transitivity"""

LclCoef = nx.clustering(celegans_graph)
print(LclCoef)

#local clustering coefficients in graph in sorted manner
clus=nx.clustering(celegans_graph)
sort_orders = sorted(clus.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
	print(i[0], i[1])

#number of nodes with clustering coefficient = 1
clusone=0
for i in sort_orders:
    if i[1]==1:
        clusone+=1
print(clusone)

"""3. Average clustering coefficient"""

AvgCoef = nx.average_clustering(celegans_graph)
print(AvgCoef)

#verification of avg clustering with manual code :
sum=0
for keys in LclCoef.values():
    sum += float(keys)
sum/=len(LclCoef)
print(sum)

"""#Reciprocity"""

R = nx.overall_reciprocity(celegans_graph)
print(R)